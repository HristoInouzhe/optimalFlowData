
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "optimalFlow"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('optimalFlow')
Loading required package: dplyr

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: optimalFlowData
Loading required package: rlang
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("GaussianBarycenters")
> ### * GaussianBarycenters
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GaussianBarycenters
> ### Title: GaussianBarycenters
> ### Aliases: GaussianBarycenters
> 
> ### ** Examples
> 
> GaussianBarycenters(list(diag(2,2),diag(1,2)), c(0.5,0.5))
$Barycenter
         [,1]     [,2]
[1,] 1.457098 0.000000
[2,] 0.000000 1.457098

$Variation
[1] 0.08578644

$Num.iter
[1] 16

> 
> 
> 
> cleanEx()
> nameEx("InitClusters")
> ### * InitClusters
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: InitClusters
> ### Title: InitClusters
> ### Aliases: InitClusters
> 
> ### ** Examples
> 
> ######EXAMPLE tclust_
> ##### tclust_ is the function which obtain the clusters for tclust_H function
> 
> x=rbind(matrix(rnorm(100),ncol=2),matrix(rnorm(100)+2,ncol=2),matrix(rnorm(100)+4,ncol=2))
> output3=tclust_( X=x , K=3 , alpha = 0.05 , niter = 20 , Ksteps=10 ,
+ equal.weights = FALSE, restr.cov.value = "eigen" ,
+ maxfact_e = 5 , zero.tol = 1e-16 ,  trace = 0 ,
+ sol_ini_p = FALSE ,   sol_ini=NA )
> 
> ##restr.diffax <- function (iter, pa)
> ##	Apply constraints to covariance matrices
> iter=output3$iter
> pa=output3$pa
> 
> #Gives an initial solution based on a random subsample
> iter=InitClusters (X=x, iter=output3$iter, pa=output3$pa)
> iter$cw
[1] 0.5633803 0.2112676 0.2253521
> iter$center
          [,1]      [,2]
[1,] 0.9916552 0.7121467
[2,] 2.6024762 3.9532974
[3,] 2.3348345 1.2135655
> iter$sigma
, , 1

          [,1]      [,2]
[1,] 0.6843702 0.1616845
[2,] 0.1616845 0.6044051

, , 2

          [,1]      [,2]
[1,] 1.1865037 0.2101897
[2,] 0.2101897 0.1117096

, , 3

         [,1]     [,2]
[1,] 5.674823 5.118252
[2,] 5.118252 4.957733

> 
> 
> 
> cleanEx()
> nameEx("TreatSingularity")
> ### * TreatSingularity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: TreatSingularity
> ### Title: TreatSingularity
> ### Aliases: TreatSingularity
> 
> ### ** Examples
> 
> ######EXAMPLE tclust_
> ##### tclust_ is the function which obtain the clusters for tclust_H function
> 
> x=rbind(matrix(rnorm(100),ncol=2),matrix(rnorm(100)+2,ncol=2),matrix(rnorm(100)+4,ncol=2))
> output3=tclust_( X=x , K=3 , alpha = 0.05 , niter = 20 , Ksteps=10 ,
+ equal.weights = FALSE, restr.cov.value = "eigen" ,
+ maxfact_e = 5 , zero.tol = 1e-16 ,  trace = 0 ,
+ sol_ini_p = FALSE ,   sol_ini=NA )
> 
> ##restr.diffax <- function (iter, pa)
> ##	Apply constraints to covariance matrices
> iter=output3$iter
> pa=output3$pa
> 
> ##### It shows a warning message
> #####	warning ("points in the data set are concentrated in k points after trimming ")
> TreatSingularity (iter, pa)
Warning in TreatSingularity(iter, pa) :
  points in the data set are concentrated in k points after trimming 
$obj
[1] -495.4745

$assig
  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1
 [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 3 1 1 3 1 1 2 1 1 1 1 2 1 1 1
 [75] 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 1 1 1 3 3 3 3 2 0 0 3 3 3 3
[112] 3 3 2 3 3 3 1 3 3 2 3 3 0 2 3 0 2 3 3 2 1 2 3 3 3 3 2 3 3 3 3 3 1 3 2 3 3
[149] 3 3

$csize
[1] 94 12 37

$cw
[1] 0.65734266 0.08391608 0.25874126

$sigma
, , 1

          [,1]      [,2]
[1,] 1.0412700 0.5671618
[2,] 0.5671618 1.4382917

, , 2

           [,1]       [,2]
[1,] 0.39508978 0.01565716
[2,] 0.01565716 0.37723093

, , 3

          [,1]      [,2]
[1,] 0.4692628 0.1446844
[2,] 0.1446844 0.5751391


$center
          [,1]     [,2]
[1,] 0.9420081 1.018191
[2,] 2.3416601 4.465199
[3,] 4.3548111 4.049420

$code
[1] 2

$z_ij
       [,1] [,2] [,3]
  [1,]    1    0    0
  [2,]    1    0    0
  [3,]    1    0    0
  [4,]    1    0    0
  [5,]    1    0    0
  [6,]    1    0    0
  [7,]    1    0    0
  [8,]    1    0    0
  [9,]    1    0    0
 [10,]    1    0    0
 [11,]    1    0    0
 [12,]    1    0    0
 [13,]    1    0    0
 [14,]    0    0    0
 [15,]    1    0    0
 [16,]    1    0    0
 [17,]    1    0    0
 [18,]    1    0    0
 [19,]    1    0    0
 [20,]    1    0    0
 [21,]    1    0    0
 [22,]    1    0    0
 [23,]    1    0    0
 [24,]    0    0    0
 [25,]    1    0    0
 [26,]    1    0    0
 [27,]    1    0    0
 [28,]    1    0    0
 [29,]    1    0    0
 [30,]    1    0    0
 [31,]    1    0    0
 [32,]    1    0    0
 [33,]    1    0    0
 [34,]    1    0    0
 [35,]    1    0    0
 [36,]    1    0    0
 [37,]    1    0    0
 [38,]    1    0    0
 [39,]    1    0    0
 [40,]    1    0    0
 [41,]    1    0    0
 [42,]    1    0    0
 [43,]    1    0    0
 [44,]    1    0    0
 [45,]    1    0    0
 [46,]    1    0    0
 [47,]    1    0    0
 [48,]    1    0    0
 [49,]    1    0    0
 [50,]    1    0    0
 [51,]    1    0    0
 [52,]    1    0    0
 [53,]    1    0    0
 [54,]    1    0    0
 [55,]    1    0    0
 [56,]    0    0    0
 [57,]    1    0    0
 [58,]    1    0    0
 [59,]    1    0    0
 [60,]    0    0    1
 [61,]    1    0    0
 [62,]    1    0    0
 [63,]    0    0    1
 [64,]    1    0    0
 [65,]    1    0    0
 [66,]    0    1    0
 [67,]    1    0    0
 [68,]    1    0    0
 [69,]    1    0    0
 [70,]    1    0    0
 [71,]    0    1    0
 [72,]    1    0    0
 [73,]    1    0    0
 [74,]    1    0    0
 [75,]    1    0    0
 [76,]    1    0    0
 [77,]    1    0    0
 [78,]    0    1    0
 [79,]    1    0    0
 [80,]    1    0    0
 [81,]    1    0    0
 [82,]    1    0    0
 [83,]    1    0    0
 [84,]    1    0    0
 [85,]    1    0    0
 [86,]    1    0    0
 [87,]    1    0    0
 [88,]    1    0    0
 [89,]    1    0    0
 [90,]    1    0    0
 [91,]    1    0    0
 [92,]    1    0    0
 [93,]    1    0    0
 [94,]    1    0    0
 [95,]    1    0    0
 [96,]    1    0    0
 [97,]    0    0    1
 [98,]    1    0    0
 [99,]    1    0    0
[100,]    1    0    0
[101,]    0    0    1
[102,]    0    0    1
[103,]    0    0    1
[104,]    0    0    1
[105,]    0    1    0
[106,]    0    0    0
[107,]    0    0    0
[108,]    0    0    1
[109,]    0    0    1
[110,]    0    0    1
[111,]    0    0    1
[112,]    0    0    1
[113,]    0    0    1
[114,]    0    1    0
[115,]    0    0    1
[116,]    0    0    1
[117,]    0    0    1
[118,]    1    0    0
[119,]    0    0    1
[120,]    0    0    1
[121,]    0    1    0
[122,]    0    0    1
[123,]    0    0    1
[124,]    0    0    0
[125,]    0    1    0
[126,]    0    0    1
[127,]    0    0    0
[128,]    0    1    0
[129,]    0    0    1
[130,]    0    0    1
[131,]    0    1    0
[132,]    1    0    0
[133,]    0    1    0
[134,]    0    0    1
[135,]    0    0    1
[136,]    0    0    1
[137,]    0    0    1
[138,]    0    1    0
[139,]    0    0    1
[140,]    0    0    1
[141,]    0    0    1
[142,]    0    0    1
[143,]    0    0    1
[144,]    1    0    0
[145,]    0    0    1
[146,]    0    1    0
[147,]    0    0    1
[148,]    0    0    1
[149,]    0    0    1
[150,]    0    0    1

$lambda
[1] NA NA NA

> 
> 
> 
> cleanEx()
> nameEx("calcobj")
> ### * calcobj
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calcobj
> ### Title: calcobj
> ### Aliases: calcobj
> 
> ### ** Examples
> 
> x=rbind(matrix(rnorm(100),ncol=2),matrix(rnorm(100)+2,ncol=2),
+ matrix(rnorm(100)+4,ncol=2))
> output3=tclust_( X=x , K=3 , alpha = 0.05 , niter = 20 ,Ksteps=10 ,
+ equal.weights = FALSE, restr.cov.value = "eigen" ,
+ maxfact_e = 5 , zero.tol = 1e-16 ,  trace = 0 ,
+ sol_ini_p = FALSE ,   sol_ini=NA )
> 
> iter = output3$iter
> pa = output3$pa
> 
> ## calcobj  obtains the objective function value for data,
> ## an input parameters and a solution, including assigment and parameters
> 
> iter_ = calcobj (X=x, iter=iter, pa=pa)
> iter_$obj
[1] -495.4745
> 
> 
> 
> cleanEx()
> nameEx("costWasserMatchingEllipse")
> ### * costWasserMatchingEllipse
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: costWasserMatchingEllipse
> ### Title: costWasserMatchingEllipse
> ### Aliases: costWasserMatchingEllipse
> 
> ### ** Examples
> 
> partition1 = list(list(mean = c(1,1), cov = diag(1,2), weight = 0.5, type = "1"),
+ list(mean = c(-1,-1), cov = diag(1,2), weight = 0.5, type = "2"))
> partition2 = list(list(list(mean = c(1,-1), cov = diag(1,2),
+ weight = 0.5, type = "1"), list(mean = c(-1,1), cov = diag(1,2), weight = 0.5, type = "2")))
> costWasserMatchingEllipse(partition1, partition2)
     [,1]
[1,]    1
> 
> 
> 
> cleanEx()
> nameEx("distGaussian")
> ### * distGaussian
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: distGaussian
> ### Title: distGaussian
> ### Aliases: distGaussian
> 
> ### ** Examples
> 
> distGaussian(list(mean = c(-1,-1), cov = diag(2,2)), list(mean = c(1,1), cov = diag(1,2)))
[1] 8.343146
> 
> 
> 
> cleanEx()
> nameEx("distGaussianCov")
> ### * distGaussianCov
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: distGaussianCov
> ### Title: distGaussianCov
> ### Aliases: distGaussianCov
> 
> ### ** Examples
> 
> distGaussianCov(list(mean = c(1,1), cov = diag(2,2)), list(mean = c(1,1), cov = diag(1,2)))
[1] 0.3431458
> 
> 
> 
> cleanEx()
> nameEx("distGaussianMean")
> ### * distGaussianMean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: distGaussianMean
> ### Title: distGaussianMean
> ### Aliases: distGaussianMean
> 
> ### ** Examples
> 
> distGaussianMean(list(mean = c(-1,-1), cov = diag(1,2)), list(mean = c(1,1), cov = diag(1,2)))
[1] 8
> 
> 
> 
> cleanEx()
> nameEx("dmnorm")
> ### * dmnorm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dmnorm
> ### Title: dmnorm
> ### Aliases: dmnorm
> 
> ### ** Examples
> 
> ##	Multivariate normal density
> ##	Gives Multivariate normal density values for given  mu  and sigma
> x=rbind(matrix(rnorm(100),ncol=2),matrix(rnorm(100)+2,ncol=2),matrix(rnorm(100)+4,ncol=2))
> dmnorm (X=x,mu=c(0,0),sigma=diag(2))
  [1] 1.208333e-01 1.297653e-01 1.059068e-01 2.356323e-02 5.399071e-02
  [6] 1.599542e-02 1.321132e-01 7.026037e-02 1.146433e-01 1.505247e-01
 [11] 2.838436e-03 1.473955e-01 1.034448e-01 1.369510e-02 6.413023e-02
 [16] 1.561860e-01 3.121221e-02 3.483210e-02 1.122729e-01 1.259624e-02
 [21] 9.318286e-02 9.110363e-02 1.317103e-01 1.422284e-02 5.985877e-02
 [26] 1.522970e-01 1.425208e-01 5.396422e-02 1.415710e-01 1.225811e-01
 [31] 5.379503e-02 1.568765e-01 7.375797e-02 4.978944e-02 5.169420e-02
 [36] 1.381500e-01 8.368463e-02 1.516925e-01 8.115763e-02 1.147767e-01
 [41] 1.355283e-01 7.431478e-02 6.367119e-02 1.066755e-01 3.564703e-02
 [46] 1.060224e-01 6.592873e-02 1.005083e-01 7.471862e-02 9.651020e-02
 [51] 3.054072e-03 2.777933e-03 2.137849e-02 8.742546e-03 5.645583e-02
 [56] 8.595055e-05 4.413695e-05 8.912489e-04 7.677110e-03 1.015421e-07
 [61] 3.315853e-03 1.033388e-02 4.096748e-06 9.938691e-04 1.230359e-02
 [66] 6.299381e-06 8.467209e-03 3.067811e-02 1.268410e-03 2.643763e-03
 [71] 4.865712e-06 6.487598e-05 1.580266e-03 4.778853e-03 6.536906e-03
 [76] 5.824267e-04 5.111122e-04 5.745303e-06 6.827109e-04 2.277527e-04
 [81] 1.418686e-02 6.855406e-04 5.496952e-04 1.229767e-01 4.639381e-04
 [86] 2.624162e-02 9.300096e-05 2.516921e-02 1.871521e-02 1.353708e-02
 [91] 3.010635e-02 5.725199e-05 6.732456e-02 8.904776e-04 7.868977e-02
 [96] 4.636221e-02 1.006995e-07 1.281553e-02 6.728712e-03 4.023908e-02
[101] 1.840083e-09 9.047843e-13 1.175586e-11 1.663774e-07 5.965013e-07
[106] 1.919084e-16 8.284733e-07 1.523748e-10 3.934525e-09 1.023174e-08
[111] 4.834142e-10 1.340080e-08 2.454707e-07 3.772302e-08 4.962853e-14
[116] 4.231968e-12 2.907044e-07 7.044857e-05 3.973022e-09 5.904610e-07
[121] 1.114166e-05 3.392526e-09 3.837395e-06 4.944860e-14 4.960278e-07
[126] 1.492680e-14 4.398238e-05 1.191115e-07 6.493049e-07 9.984077e-11
[131] 1.068039e-07 1.352952e-04 3.939002e-10 2.007916e-08 1.956641e-07
[136] 8.769940e-07 1.880888e-08 1.487905e-08 1.960370e-11 1.980851e-10
[141] 3.634168e-09 3.466447e-11 2.611768e-09 4.444821e-05 1.455123e-14
[146] 4.183443e-06 4.762089e-09 6.694479e-10 4.197437e-08 5.823754e-10
> 
> 
> 
> cleanEx()
> nameEx("estimClustPar")
> ### * estimClustPar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: estimClustPar
> ### Title: estimClustPar
> ### Aliases: estimClustPar
> 
> ### ** Examples
> 
> ## tclust_ is the function which obtain the clusters for tclust_H function
> 
> x=rbind(matrix(rnorm(100),ncol=2),matrix(rnorm(100)+2,ncol=2),matrix(rnorm(100)+4,ncol=2))
> output3=tclust_( X=x , K=3 , alpha = 0.05 , niter = 20 , Ksteps=10 ,
+ equal.weights = FALSE, restr.cov.value = "eigen" ,
+ maxfact_e = 5 , zero.tol = 1e-16 ,  trace = 0 ,
+ sol_ini_p = FALSE ,   sol_ini=NA )
> 
> ##restr.diffax <- function (iter, pa)
> ##	Apply constraints to covariance matrices
> iter=output3$iter
> pa=output3$pa
> 
> ## estimClustPar  obtains the best values for the parameters,
> ##given data, input parameters and an assigment.
> output4=estimClustPar (X=x, iter, pa)
> output4$center
          [,1]     [,2]
[1,] 0.9420081 1.018191
[2,] 2.3416601 4.465199
[3,] 4.3548111 4.049420
> output4$sigma
, , 1

          [,1]      [,2]
[1,] 1.1281854 0.6896683
[2,] 0.6896683 1.6109635

, , 2

          [,1]      [,2]
[1,] 0.3304812 0.1268811
[2,] 0.1268811 0.1857583

, , 3

          [,1]      [,2]
[1,] 0.4364485 0.1676199
[2,] 0.1676199 0.5591084

> output4$cw
[1] 0.65734266 0.08391608 0.25874126
> 
> 
> 
> cleanEx()
> nameEx("estimCovCellGeneral")
> ### * estimCovCellGeneral
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: estimCovCellGeneral
> ### Title: estimCovCellGeneral
> ### Aliases: estimCovCellGeneral
> 
> ### ** Examples
> 
> estimCovCellGeneral("Basophils", Cytometry1[,1:10], Cytometry1[,11])
$mean
CD19/TCRgd:PE Cy7-A LOGICAL       CD38:APC H7-A LOGICAL 
                   2846.243                    5569.737 
          CD3:APC-A LOGICAL       CD4+CD20:PB-A LOGICAL 
                   3108.905                    2175.043 
          CD45:PO-A LOGICAL       CD56+IgK:PE-A LOGICAL 
                   4464.604                    5496.216 
  CD5:PerCP Cy5-5-A LOGICAL      CD8+IgL:FITC-A LOGICAL 
                   2612.830                    5079.364 
               FSC-A LINEAR           SSC-A Exp-SSC Low 
                   1842.875                    1541.649 

$cov
                            CD19/TCRgd:PE Cy7-A LOGICAL CD38:APC H7-A LOGICAL
CD19/TCRgd:PE Cy7-A LOGICAL                  203489.758             80906.922
CD38:APC H7-A LOGICAL                         80906.922            152450.475
CD3:APC-A LOGICAL                             61430.857            109817.734
CD4+CD20:PB-A LOGICAL                          8127.980            -31900.318
CD45:PO-A LOGICAL                              3987.752             13342.746
CD56+IgK:PE-A LOGICAL                         67710.263             23111.573
CD5:PerCP Cy5-5-A LOGICAL                     -1284.796              9751.396
CD8+IgL:FITC-A LOGICAL                        71438.956             28384.543
FSC-A LINEAR                                  15020.629              8935.208
SSC-A Exp-SSC Low                             33966.996             29476.435
                            CD3:APC-A LOGICAL CD4+CD20:PB-A LOGICAL
CD19/TCRgd:PE Cy7-A LOGICAL         61430.857            8127.98023
CD38:APC H7-A LOGICAL              109817.734          -31900.31766
CD3:APC-A LOGICAL                  306272.826          -18371.57909
CD4+CD20:PB-A LOGICAL              -18371.579          273455.71591
CD45:PO-A LOGICAL                   13167.521             -60.59982
CD56+IgK:PE-A LOGICAL                9968.591           15220.07481
CD5:PerCP Cy5-5-A LOGICAL           20762.483           17270.90076
CD8+IgL:FITC-A LOGICAL              21065.863           13092.44604
FSC-A LINEAR                        28698.564           13147.08014
SSC-A Exp-SSC Low                   69742.909           14934.83377
                            CD45:PO-A LOGICAL CD56+IgK:PE-A LOGICAL
CD19/TCRgd:PE Cy7-A LOGICAL        3987.75218             67710.263
CD38:APC H7-A LOGICAL             13342.74623             23111.573
CD3:APC-A LOGICAL                 13167.52117              9968.591
CD4+CD20:PB-A LOGICAL               -60.59982             15220.075
CD45:PO-A LOGICAL                 17837.71243             -2449.856
CD56+IgK:PE-A LOGICAL             -2449.85630             79804.488
CD5:PerCP Cy5-5-A LOGICAL           742.18132             36849.558
CD8+IgL:FITC-A LOGICAL             -223.33247             74709.635
FSC-A LINEAR                       4194.87570             15573.820
SSC-A Exp-SSC Low                  7324.13017             32088.080
                            CD5:PerCP Cy5-5-A LOGICAL CD8+IgL:FITC-A LOGICAL
CD19/TCRgd:PE Cy7-A LOGICAL                -1284.7961             71438.9565
CD38:APC H7-A LOGICAL                       9751.3964             28384.5426
CD3:APC-A LOGICAL                          20762.4829             21065.8627
CD4+CD20:PB-A LOGICAL                      17270.9008             13092.4460
CD45:PO-A LOGICAL                            742.1813              -223.3325
CD56+IgK:PE-A LOGICAL                      36849.5583             74709.6351
CD5:PerCP Cy5-5-A LOGICAL                 346681.2328             32864.6301
CD8+IgL:FITC-A LOGICAL                     32864.6301             87721.1926
FSC-A LINEAR                               20783.2460             16513.7914
SSC-A Exp-SSC Low                          37079.7590             36790.3222
                            FSC-A LINEAR SSC-A Exp-SSC Low
CD19/TCRgd:PE Cy7-A LOGICAL    15020.629          33967.00
CD38:APC H7-A LOGICAL           8935.208          29476.43
CD3:APC-A LOGICAL              28698.564          69742.91
CD4+CD20:PB-A LOGICAL          13147.080          14934.83
CD45:PO-A LOGICAL               4194.876           7324.13
CD56+IgK:PE-A LOGICAL          15573.820          32088.08
CD5:PerCP Cy5-5-A LOGICAL      20783.246          37079.76
CD8+IgL:FITC-A LOGICAL         16513.791          36790.32
FSC-A LINEAR                   29287.082          34948.50
SSC-A Exp-SSC Low              34948.504          88185.99

$weight
[1] 0.006472648

$type
[1] "Basophils"

> 
> 
> 
> cleanEx()
> nameEx("estimationCellBarycenter")
> ### * estimationCellBarycenter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: estimationCellBarycenter
> ### Title: estimationCellBarycenter
> ### Aliases: estimationCellBarycenter
> 
> ### ** Examples
> 
> partition1 = list(list(mean = c(1,1), cov = diag(1,2), weight = 0.5, type = "1"),
+ list(mean = c(-1,-1), cov = diag(1,2), weight = 0.5, type = "2"))
> partition2 = list(list(mean = c(1,-1), cov = diag(1,2), weight = 0.5, type = "1"),
+ list(mean = c(-1,1), cov = diag(1,2), weight = 0.5, type = "2"))
> cytometries = list(partition1, partition2)
> estimationCellBarycenter("1",cytometries)
$mean
[1] 1 0

$cov
     [,1] [,2]
[1,]    1    0
[2,]    0    1

$weight
[1] 0.5

$type
[1] "1"

> 
> 
> 
> cleanEx()
> nameEx("f1Score")
> ### * f1Score
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: f1Score
> ### Title: f1Score
> ### Aliases: f1Score
> 
> ### ** Examples
> 
> f1Score(dplyr::pull(Cytometry3[c(sample(1:250,250),251:(dim(Cytometry3)[1])),],11),
+ Cytometry3, noise.types)
              noise  CD4+CD8- Neutrophils  CD8+CD4- Basophils Mature SIg Kappa
F1-score  0.9987563 0.9952423   0.9968728 0.9962963 0.9875776        0.9900794
Precision 0.9987563 0.9952423   0.9968728 0.9962963 0.9875776        0.9900794
Recall    0.9987563 0.9952423   0.9968728 0.9962963 0.9875776        0.9900794
          Eosinophils Monocytes Mature SIg Lambda    TCRgd+    TCRgd-
F1-score    0.9965096 0.9976415         0.9974359 0.9981618 0.9892473
Precision   0.9965096 0.9976415         0.9974359 0.9981618 0.9892473
Recall      0.9965096 0.9976415         0.9974359 0.9981618 0.9892473
          Monocytoid DC Neutrophils (U.S.) Plasmocytoid DC CD4+CD8dim
F1-score      0.9714286                  1               1          1
Precision     0.9714286                  1               1          1
Recall        0.9714286                  1               1          1
          CD56bright CD56dim Myeloid DC
F1-score           1       1          1
Precision          1       1          1
Recall             1       1          1
> 
> 
> 
> cleanEx()
> nameEx("f1ScoreVoting")
> ### * f1ScoreVoting
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: f1ScoreVoting
> ### Title: f1ScoreVoting
> ### Aliases: f1ScoreVoting
> 
> ### ** Examples
> 
> database = list(as.data.frame(Cytometry2)[which(match(Cytometry2$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry3)[which(match(Cytometry3$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry4)[which(match(Cytometry4$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry5)[which(match(Cytometry5$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry7)[which(match(Cytometry7$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry8)[which(match(Cytometry8$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry9)[which(match(Cytometry9$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry12)[which(match(Cytometry12$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry13)[which(match(Cytometry13$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry14)[which(match(Cytometry14$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry15)[which(match(Cytometry15$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry16)[which(match(Cytometry16$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry17)[which(match(Cytometry17$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry19)[which(match(Cytometry19$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry21)[which(match(Cytometry21$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),])
> 
> 
> templates.optimalFlow = optimalFlowTemplates(database = database, templates.number = 5,
+ cl.paral = 1)
[1] "step 1: 1.83284473419189 secs"
[1] "step 2: 1.32203316688538 secs"
[1] "Execution time: 3.17033433914185 secs"
> 
> 
> classification.optimalFlow = optimalFlowClassification(as.data.frame(Cytometry1)[
+ which(match(Cytometry1$`Population ID (name)`,c("Monocytes", "CD4+CD8-",
+ "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0), 1:10],database, templates.optimalFlow,
+ classif.method = "matching", cost.function = "ellipses", cl.paral = 1)
[1] "tclust looking for k = 4"
[1] "tclust found k = 3"
[1] "1.01459455490112 secs"

[1] "tclust looking for k = 4"
[1] "tclust found k = 3"
[1] "1.1757869720459 secs"

[1] "tclust looking for k = 4"
[1] "tclust found k = 3"
[1] "1.25783252716064 secs"

[1] "tclust looking for k = 4"
[1] "tclust found k = 3"
[1] "1.30399370193481 secs"

[1] "tclust looking for k = 4"
[1] "tclust found k = 3"
[1] "1.0436851978302 secs"

[1] "step 1: 5.80601572990417 secs"
[1] "Similarity distances to templates:"
          [,1]      [,2]      [,3]      [,4]      [,5]
[1,] 0.2464813 0.3676256 0.3434318 0.3864898 0.4320735
[1] "step 2: 0.0608296394348145 secs"
[1] "0.00886130332946777 secs"
[1] "step 3: 0.0567083358764648 secs"
Time difference of 5.929353 secs
> 
> 
> f1ScoreVoting(classification.optimalFlow$cluster.vote, classification.optimalFlow$cluster,
+ as.data.frame(Cytometry1)[which(match(Cytometry1$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),], 1.01, noise.types)
$F1_score
           CD4+CD8- Mature SIg Kappa Monocytes    TCRgd-
F1-score  0.9811371        0.9993655 0.9960968 0.4219554
Precision 1.0000000        1.0000000 1.0000000 0.2673913
Recall    0.9629726        0.9987318 0.9922240 1.0000000

$correspondance
[1] "CD4+CD8-"         "Mature SIg Kappa" "Monocytes"        "TCRgd-"          

> 
> 
> 
> 
> cleanEx()
> nameEx("findClustAssig")
> ### * findClustAssig
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findClustAssig
> ### Title: findClustAssig
> ### Aliases: findClustAssig
> 
> ### ** Examples
> 
> ##### tclust_ is the function which obtain the clusters for tclust_H function
> 
> x=rbind(matrix(rnorm(100),ncol=2),matrix(rnorm(100)+2,ncol=2),matrix(rnorm(100)+4,ncol=2))
> output3=tclust_( X=x , K=3 , alpha = 0.05 , niter = 20 , Ksteps=10 ,
+ equal.weights = FALSE, restr.cov.value = "eigen" ,
+ maxfact_e = 5 , zero.tol = 1e-16 ,  trace = 0 ,
+ sol_ini_p = FALSE ,   sol_ini=NA )
> 
> iter = output3$iter
> pa = output3$pa
> 
> output5 = findClustAssig(X=x, iter, pa)
> 
> 
> 
> cleanEx()
> nameEx("getini")
> ### * getini
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getini
> ### Title: getini
> ### Aliases: getini
> 
> ### ** Examples
> 
> ## gives a random vector from a K dimensional multinomial(no.trim, pi.ini)
> ## with pi.ini a random vector build with random values from uniform (0,1)
> v=getini  (K=3, no.trim=100)
> v
[1] 21 34 45
> 
> 
> 
> cleanEx()
> nameEx("kcenter")
> ### * kcenter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: kcenter
> ### Title: kcenter
> ### Aliases: kcenter
> 
> ### ** Examples
> 
> normals = list(list(mean = c(1,1), cov = diag(2,2)),
+ list(mean = c(1,1), cov = diag(1,2)), list(mean = c(3,3), cov = diag(1,2)))
> kcenter(normals, 2, c(1,1,2))
$kcenters
$kcenters[[1]]
$kcenters[[1]]$mean
[1] 1 1

$kcenters[[1]]$cov
         [,1]     [,2]
[1,] 1.457098 0.000000
[2,] 0.000000 1.457098


$kcenters[[2]]
$kcenters[[2]]$mean
[1] 3 3

$kcenters[[2]]$cov
     [,1] [,2]
[1,]    1    0
[2,]    0    1



$t.variation
[1] 0.08578644

> 
> 
> 
> cleanEx()
> nameEx("labelTransfer")
> ### * labelTransfer
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: labelTransfer
> ### Title: labelTransfer
> ### Aliases: labelTransfer
> 
> ### ** Examples
> 
> data.example = data.frame(v1 = c(rnorm(50,2,1), rnorm(50,-2,1)),
+ v2 = c(rnorm(50,2,1), rnorm(50,-2,1)), id = c(rep(0,50), rep(1,50)))
> test.labels = c(rep("a",50), rep("b", 50))
> labelTransfer(data.example, data.example[,1:2], test.labels)
  from to mass
1    0  a  0.5
2    1  b  0.5
> 
> 
> 
> cleanEx()
> nameEx("labelTransferEllipse")
> ### * labelTransferEllipse
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: labelTransferEllipse
> ### Title: labelTransferEllipse
> ### Aliases: labelTransferEllipse
> 
> ### ** Examples
> 
> partition1 = list(list(mean = c(1,1), cov = diag(1,2), weight = 0.5, type = "1"),
+ list(mean = c(-1,-1), cov = diag(1,2), weight = 0.5, type = "2"))
> partition2 = list(list(mean = c(1,1), cov = diag(1,2), weight = 0.5, type = "a"),
+ list(mean = c(-1,-1), cov = diag(1,2), weight = 0.5, type = "b"))
> labelTransferEllipse(1, partition2, partition1)
  from to mass
1    1  a  0.5
2    2  b  0.5
> 
> 
> 
> cleanEx()
> nameEx("optimalFlowClassification")
> ### * optimalFlowClassification
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: optimalFlowClassification
> ### Title: optimalFlowClassification
> ### Aliases: optimalFlowClassification
> 
> ### ** Examples
> 
> database = list(as.data.frame(Cytometry2)[which(match(Cytometry2$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry3)[which(match(Cytometry3$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry4)[which(match(Cytometry4$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry5)[which(match(Cytometry5$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry7)[which(match(Cytometry7$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry8)[which(match(Cytometry8$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry9)[which(match(Cytometry9$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry12)[which(match(Cytometry12$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry13)[which(match(Cytometry13$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry14)[which(match(Cytometry14$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry15)[which(match(Cytometry15$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry16)[which(match(Cytometry16$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry17)[which(match(Cytometry17$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry19)[which(match(Cytometry19$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry21)[which(match(Cytometry21$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),])
> 
> 
> templates.optimalFlow = optimalFlowTemplates(database = database, templates.number = 5,
+ cl.paral = 1)
[1] "step 1: 1.79687643051147 secs"
[1] "step 2: 1.29682469367981 secs"
[1] "Execution time: 3.11184883117676 secs"
> 
> 
> classification.optimalFlow = optimalFlowClassification(as.data.frame(Cytometry1)[
+ which(match(Cytometry1$`Population ID (name)`,c("Monocytes", "CD4+CD8-", "Mature SIg Kappa",
+ "TCRgd-"), nomatch = 0)>0), 1:10], database, templates.optimalFlow, cl.paral = 1)
[1] "tclust looking for k = 4"
[1] "tclust found k = 3"
[1] "1.03143835067749 secs"

[1] "tclust looking for k = 4"
[1] "tclust found k = 3"
[1] "1.21452450752258 secs"

[1] "tclust looking for k = 4"
[1] "tclust found k = 3"
[1] "1.14273309707642 secs"

[1] "tclust looking for k = 4"
[1] "tclust found k = 3"
[1] "1.11975383758545 secs"

[1] "tclust looking for k = 4"
[1] "tclust found k = 3"
[1] "1.12846231460571 secs"

[1] "step 1: 5.64701509475708 secs"
[1] "Similarity distances to templates:"
          [,1]      [,2]      [,3]      [,4]      [,5]
[1,] 0.2464813 0.3676256 0.3434318 0.3864898 0.4320735
[1] "step 2: 0.0595536231994629 secs"
[1] "step 3: 0.0159816741943359 secs"
Time difference of 5.728206 secs
> 
> 
> scoreF1.optimalFlow = optimalFlow::f1Score(classification.optimalFlow$cluster,
+ as.data.frame(Cytometry1)[which(match(Cytometry1$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),], noise.types)
> 
> 
> 
> 
> cleanEx()
> nameEx("optimalFlowTemplates")
> ### * optimalFlowTemplates
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: optimalFlowTemplates
> ### Title: optimalFlowTemplates
> ### Aliases: optimalFlowTemplates
> 
> ### ** Examples
> 
> 
> database = list(as.data.frame(Cytometry2)[which(match(Cytometry2$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry3)[which(match(Cytometry3$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry4)[which(match(Cytometry4$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry5)[which(match(Cytometry5$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry7)[which(match(Cytometry7$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry8)[which(match(Cytometry8$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry9)[which(match(Cytometry9$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry12)[which(match(Cytometry12$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry13)[which(match(Cytometry13$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry14)[which(match(Cytometry14$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry15)[which(match(Cytometry15$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry16)[which(match(Cytometry16$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry17)[which(match(Cytometry17$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry19)[which(match(Cytometry19$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry21)[which(match(Cytometry21$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),])
> 
> 
> templates.optimalFlow = optimalFlowTemplates(database = database, templates.number = 5,
+ cl.paral = 1)
[1] "step 1: 1.81112861633301 secs"
[1] "step 2: 1.36508870124817 secs"
[1] "Execution time: 3.18175435066223 secs"
> 
> 
> 
> cleanEx()
> nameEx("qdaClassification")
> ### * qdaClassification
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: qdaClassification
> ### Title: qdaClassification
> ### Aliases: qdaClassification
> 
> ### ** Examples
> 
> data.qda = cbind(rnorm(50), rnorm(50))
> exp(qdaClassification(list(mean = c(0,0), cov = diag(1,2), weight = 1), data.qda))
            [,1]
 [1,] 0.75921799
 [2,] 0.81533958
 [3,] 0.66543194
 [4,] 0.14805212
 [5,] 0.33923366
 [6,] 0.10050216
 [7,] 0.83009150
 [8,] 0.44145895
 [9,] 0.72032534
[10,] 0.94577469
[11,] 0.01783442
[12,] 0.92611324
[13,] 0.64996282
[14,] 0.08604887
[15,] 0.40294213
[16,] 0.98134541
[17,] 0.19611209
[18,] 0.21885652
[19,] 0.70543163
[20,] 0.07914449
[21,] 0.58548521
[22,] 0.57242099
[23,] 0.82756030
[24,] 0.08936472
[25,] 0.37610372
[26,] 0.95691025
[27,] 0.89548486
[28,] 0.33906722
[29,] 0.88951665
[30,] 0.77020001
[31,] 0.33800414
[32,] 0.98568417
[33,] 0.46343501
[34,] 0.31283625
[35,] 0.32480426
[36,] 0.86802200
[37,] 0.52580602
[38,] 0.95311189
[39,] 0.50992844
[40,] 0.72116343
[41,] 0.85154920
[42,] 0.46693352
[43,] 0.40005786
[44,] 0.67026204
[45,] 0.22397689
[46,] 0.66615810
[47,] 0.41424245
[48,] 0.63151218
[49,] 0.46947095
[50,] 0.60639148
> 
> 
> 
> cleanEx()
> nameEx("restr.diffax")
> ### * restr.diffax
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: restr.diffax
> ### Title: restr.diffax
> ### Aliases: restr.diffax
> 
> ### ** Examples
> 
> ######EXAMPLE tclust_
> ##### tclust_ is the function which obtain the clusters for tclust_H function
> 
> x=rbind(matrix(rnorm(100),ncol=2),matrix(rnorm(100)+2,ncol=2),matrix(rnorm(100)+4,ncol=2))
> output3=tclust_( X=x , K=3 , alpha = 0.05 , niter = 20 , Ksteps=10 ,
+ equal.weights = FALSE, restr.cov.value = "eigen" ,
+ maxfact_e = 5 , zero.tol = 1e-16 ,  trace = 0 ,
+ sol_ini_p = FALSE ,   sol_ini=NA )
> 
> ##restr.diffax <- function (iter, pa)
> ##	Apply constraints to covariance matrices
> iter=output3$iter
> pa=output3$pa
> pa$maxfact_e=1.1
> print(iter$sigma)
, , 1

          [,1]      [,2]
[1,] 1.0412700 0.5671618
[2,] 0.5671618 1.4382917

, , 2

           [,1]       [,2]
[1,] 0.39508978 0.01565716
[2,] 0.01565716 0.37723093

, , 3

          [,1]      [,2]
[1,] 0.4692628 0.1446844
[2,] 0.1446844 0.5751391

> iter2=restr.diffax (iter, pa)
> print(iter2$sigma)
, , 1

           [,1]       [,2]
[1,] 0.95853693 0.04377052
[2,] 0.04377052 0.98917694

, , 2

          [,1]      [,2]
[1,] 0.9274828 0.0000000
[2,] 0.0000000 0.9274828

, , 3

             [,1]          [,2]
[1,] 9.274828e-01 -5.551115e-17
[2,] 5.551115e-17  9.274828e-01

> 
> 
> 
> cleanEx()
> nameEx("restr2_eigenv")
> ### * restr2_eigenv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: restr2_eigenv
> ### Title: restr2_eigenv
> ### Aliases: restr2_eigenv
> 
> ### ** Examples
> 
> #restr2_eigenv <- function(autovalues, ni.ini, factor_e, zero.tol)
> #gives optimal constrained eigenvalues
> autovalues=matrix(c(2,3,4,1,2,3),nrow=2)
> ni.ini=c(2,2,3)
> factor_e=1.1
> zero.tol=1e-9
> autovalues_const= restr2_eigenv (autovalues, ni.ini, factor_e, zero.tol)
> autovalues_const
         [,1]     [,2]     [,3]
[1,] 2.350649 2.585714 2.350649
[2,] 2.585714 2.350649 2.585714
> 
> 
> 
> cleanEx()
> nameEx("ssclmat")
> ### * ssclmat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ssclmat
> ### Title: ssclmat
> ### Aliases: ssclmat
> 
> ### ** Examples
> 
> ######EXAMPLE tclust_
> ##### tclust_ is the function which obtain the clusters for tclust_H function
> 
> x=rbind(matrix(rnorm(100),ncol=2),matrix(rnorm(100)+2,ncol=2),matrix(rnorm(100)+4,ncol=2))
> output3=tclust_( X=x , K=3 , alpha = 0.05 , niter = 20 , Ksteps=10 ,
+ equal.weights = FALSE, restr.cov.value = "eigen" ,
+ maxfact_e = 5 , zero.tol = 1e-16 ,  trace = 0 ,
+ sol_ini_p = FALSE ,   sol_ini=NA )
> 
> ##restr.diffax <- function (iter, pa)
> ##	Apply constraints to covariance matrices
> iter=output3$iter
> pa=output3$pa
> pa$maxfact_e=1.1
> iter2=restr.diffax (iter, pa)
> 
> ##EXAMPLE	extract matrix from the object containing covariance matrices
> ##sclmat <- function (x, k) as.matrix (x[,,k])
> ssclmat(iter2$sigma,k=1)
           [,1]       [,2]
[1,] 0.95853693 0.04377052
[2,] 0.04377052 0.98917694
> 
> 
> 
> cleanEx()
> nameEx("tclustWithInitialization")
> ### * tclustWithInitialization
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tclustWithInitialization
> ### Title: tclustWithInitialization
> ### Aliases: tclustWithInitialization
> 
> ### ** Examples
> 
> x=rbind(matrix(rnorm(100),ncol=2),matrix(rnorm(100)+2,ncol=2),
+ matrix(rnorm(100)+4,ncol=2))
> 
> ## robust cluster obtention from a sample x asking for 3 clusters,
> ## trimming level 0.05 and constrain level 12
> 
> k=3;alpha = 0.05;restr.fact = 12
> output=tclust_H (x=x, k = k, alpha = alpha, nstart = 50, iter.max = 20,
+ restr = "eigen", restr.fact = restr.fact, sol_ini_p = FALSE, sol_ini = NA,
+ equal.weights = FALSE, center = center, scale = scale, store.x = TRUE,
+ drop.empty.clust = TRUE, trace = 0, warnings = 3, zero.tol = 1e-16)
> 
> ## cluster assigment
> 
> output2 = tclustWithInitialization(data.frame(x, output$cluster), x, "points", 0.05, 10)
[1] "tclust looking for k = 2"
[1] "tclust found k = 2"
[1] "0.0152249336242676 secs"

> 
> 
> 
> cleanEx()
> nameEx("tclust_")
> ### * tclust_
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tclust_
> ### Title: tclust_
> ### Aliases: tclust_
> 
> ### ** Examples
> 
> x=rbind(matrix(rnorm(100),ncol=2),matrix(rnorm(100)+2,ncol=2),matrix(rnorm(100)+4,ncol=2))
> output3=tclust_( X=x , K=3 , alpha = 0.05 , niter = 20 , Ksteps=10 ,
+ equal.weights = FALSE, restr.cov.value = "eigen" ,
+ maxfact_e = 5 , zero.tol = 1e-16 ,  trace = 0 ,
+ sol_ini_p = FALSE ,   sol_ini=NA )
> ## cluster assigment
> output3$iter$assig
  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1
 [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 3 1 1 3 1 1 2 1 1 1 1 2 1 1 1
 [75] 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 1 1 1 3 3 3 3 2 0 0 3 3 3 3
[112] 3 3 2 3 3 3 1 3 3 2 3 3 0 2 3 0 2 3 3 2 1 2 3 3 3 3 2 3 3 3 3 3 1 3 2 3 3
[149] 3 3
> plot(x,col=output3$iter$assig+1)
> 
> 
> 
> cleanEx()
> nameEx("tclust_H")
> ### * tclust_H
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tclust_H
> ### Title: tclust_H
> ### Aliases: tclust_H
> 
> ### ** Examples
> 
> 
> ## tclust_H if the function which gives clusters to the user.
> ## The main role of this function is to be an interface with
> ## the user using labels for the parameters similar to tclust
> ## function in tclust package
> 
> x=rbind(matrix(rnorm(100),ncol=2),matrix(rnorm(100)+2,ncol=2),
+ matrix(rnorm(100)+4,ncol=2))
> 
> ## robust cluster obtention from a sample x asking for 3 clusters,
> ## trimming level 0.05 and constrain level 12
> 
> k=3;alpha = 0.05;restr.fact = 12
> output=tclust_H (x=x, k = k, alpha = alpha, nstart = 50, iter.max = 20,
+ restr = "eigen", restr.fact = restr.fact, sol_ini_p = FALSE, sol_ini = NA,
+ equal.weights = FALSE, center = center, scale = scale, store.x = TRUE,
+ drop.empty.clust = TRUE, trace = 0, warnings = 3, zero.tol = 1e-16)
> 
> ## cluster assigment
> 
> output$cluster
  [1] 2 2 2 2 2 2 2 2 2 2 3 2 2 0 2 2 2 2 2 2 2 2 2 0 2 2 2 0 2 2 2 2 2 2 2 2 2
 [38] 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 2 3 2 0 1 1 3 1 3 3 1 3 3 3 3 3 1 3 3 1 3 3
 [75] 3 1 3 3 3 3 3 3 1 2 3 2 3 3 3 3 2 1 2 3 2 2 1 3 2 2 1 1 1 1 3 0 0 1 1 1 1
[112] 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 1 1 3 1 1
[149] 1 1
> plot(x,col=output$cluster)
> 
> 
> 
> cleanEx()
> nameEx("trimmedKBarycenter")
> ### * trimmedKBarycenter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: trimmedKBarycenter
> ### Title: trimmedKBarycenter
> ### Aliases: trimmedKBarycenter
> 
> ### ** Examples
> 
> normals = list(list(mean = c(1,1), cov = diag(2,2)), list(mean = c(1,1),
+ cov = diag(1,2)), list(mean = c(3,3), cov = diag(1,2)))
> trimmedKBarycenter(2, 0, "rnd", normals)
$variacion_wasser
[1] 0.08578644

$baricentro
$baricentro[[1]]
$baricentro[[1]]$mean
[1] 1 1

$baricentro[[1]]$cov
         [,1]     [,2]
[1,] 1.457098 0.000000
[2,] 0.000000 1.457098


$baricentro[[2]]
$baricentro[[2]]$mean
[1] 3 3

$baricentro[[2]]$cov
     [,1] [,2]
[1,]    1    0
[2,]    0    1



$cluster
[1] 1 1 2

> 
> 
> 
> cleanEx()
> nameEx("trimmedMinDist")
> ### * trimmedMinDist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: trimmedMinDist
> ### Title: trimmedMinDist
> ### Aliases: trimmedMinDist
> 
> ### ** Examples
> 
> normals = list(list(mean = c(1,1), cov = diag(2,2)),
+ list(mean = c(1,1), cov = diag(1,2)), list(mean = c(3,3), cov = diag(1,2)))
> k_barycenter = kcenter(normals, 2, c(1,1,2))$kcenters
> trimmedMinDist(normals,k_barycenter, 0)
[1] 1 1 2
> 
> 
> 
> cleanEx()
> nameEx("voteLabelTransfer")
> ### * voteLabelTransfer
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: voteLabelTransfer
> ### Title: voteLabelTransfer
> ### Aliases: voteLabelTransfer
> 
> ### ** Examples
> 
> data.example = data.frame(v1 = c(rnorm(50,2,1), rnorm(50,-2,1)),
+ v2 = c(rnorm(50,2,1), rnorm(50,-2,1)), id = c(rep(0,50), rep(1,50)))
> test.labels = c(rep("a",50), rep("b", 50))
> voteLabelTransfer(test.partition = test.labels, test.cytometry = data.example[,1:2],
+ training.cytometries = list(data.example), op.syst = .Platform$OS.type)$final.vote[[1]]
[1] "0.0027463436126709 secs"
$a
  cell compound.proportion simple.proportion
1    0                   1                 1

$b
  cell compound.proportion simple.proportion
1    1                   1                 1

> 
> 
> 
> cleanEx()
> nameEx("voteTransformation")
> ### * voteTransformation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: voteTransformation
> ### Title: voteTransformation
> ### Aliases: voteTransformation
> 
> ### ** Examples
> 
> vote.0 = list("1" = data.frame(cell = c(1,2), "compound.proportion" = c(0.7,0.3),
+ "simple.proportion"= c(0.7,0.3)), "2" = data.frame(cell = c(1,2),
+ "compound.proportion" = c(0.3,0.7), "simple.proportion"= c(0.3,0.7)))
> vote.1.1 = t(c(0.8,0.2))
> names(vote.1.1) = c("A","B")
> vote.1.2 = t(c(0.2,0.8))
> names(vote.1.2) = c("A","B")
> vote.1 = list(vote.1.1, vote.1.2)
> voteTransformation(vote.0, vote.1)
$`1`
  cell simple.proportion compound.proportion
1    A              0.62                0.62
2    B              0.38                0.38

$`2`
  cell simple.proportion compound.proportion
1    B              0.62                0.62
2    A              0.38                0.38

> 
> 
> 
> cleanEx()
> nameEx("w2dist")
> ### * w2dist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: w2dist
> ### Title: w2dist
> ### Aliases: w2dist
> 
> ### ** Examples
> 
> P = list(mean = c(1,1), cov = diag(1,2))
> Q = list(mean = c(0,0), cov = 1.1*diag(1,2))
> w2dist(P,Q)
[1] 1.415897
> 
> 
> 
> cleanEx()
> nameEx("wasserCostFunction")
> ### * wasserCostFunction
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: wasserCostFunction
> ### Title: wasserCostFunction
> ### Aliases: wasserCostFunction
> 
> ### ** Examples
> 
> 
> database = list(as.data.frame(Cytometry2)[which(match(Cytometry2$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry3)[which(match(Cytometry3$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry4)[which(match(Cytometry4$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry5)[which(match(Cytometry5$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry7)[which(match(Cytometry7$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry8)[which(match(Cytometry8$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry9)[which(match(Cytometry9$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry12)[which(match(Cytometry12$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry13)[which(match(Cytometry13$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry14)[which(match(Cytometry14$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry15)[which(match(Cytometry15$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry16)[which(match(Cytometry16$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry17)[which(match(Cytometry17$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry19)[which(match(Cytometry19$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),],
+ as.data.frame(Cytometry21)[which(match(Cytometry21$`Population ID (name)`,
+ c("Monocytes", "CD4+CD8-", "Mature SIg Kappa", "TCRgd-"), nomatch = 0)>0),])
> 
> 
> templates.optimalFlow = optimalFlowTemplates(database = database, templates.number = 5,
+ cl.paral = 1)
[1] "step 1: 1.77177023887634 secs"
[1] "step 2: 1.28396034240723 secs"
[1] "Execution time: 3.07853770256042 secs"
> 
> 
> print(wasserCostFunction(1,2,list(templates.optimalFlow$database.elliptical[[1]],
+ templates.optimalFlow$database.elliptical[[2]])))
[1] 0.3755043
> 
> 
> 
> cleanEx()
> nameEx("wasserMinDist")
> ### * wasserMinDist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: wasserMinDist
> ### Title: wasserMinDist
> ### Aliases: wasserMinDist
> 
> ### ** Examples
> 
> normals = list(list(mean = c(1,1), cov = diag(2,2)),
+ list(mean = c(1,1), cov = diag(1,2)), list(mean = c(3,3), cov = diag(1,2)))
> k_barycenter = kcenter(normals, 2, c(1,1,2))$kcenters
> wasserMinDist(normals, k_barycenter)
           [,1]       [,2] [,3]
[1,] 0.08578931 0.08578357    0
[2,] 1.00000000 1.00000000    2
> 
> 
> 
> cleanEx()
> nameEx("wassersteinKBarycenter")
> ### * wassersteinKBarycenter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: wassersteinKBarycenter
> ### Title: wassersteinKBarycenter
> ### Aliases: wassersteinKBarycenter
> 
> ### ** Examples
> 
> normals = list(list(mean = c(1,1), cov = diag(2,2)),
+ list(mean = c(1,1), cov = diag(1,2)), list(mean = c(3,3), cov = diag(1,2)))
> wkb = wassersteinKBarycenter(1, 2, 0, "rnd", normals)
> print(wkb$wasserstein.var)
[1] 0.08578644
> print(wkb$wasserstein.k.barycente)
$variacion_wasser
[1] 0.08578644

$baricentro
$baricentro[[1]]
$baricentro[[1]]$mean
[1] 1 1

$baricentro[[1]]$cov
         [,1]     [,2]
[1,] 1.457098 0.000000
[2,] 0.000000 1.457098


$baricentro[[2]]
$baricentro[[2]]$mean
[1] 3 3

$baricentro[[2]]$cov
     [,1] [,2]
[1,]    1    0
[2,]    0    1



$cluster
[1] 1 1 2

> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  23.701 0.246 31.506 0 0.018 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
